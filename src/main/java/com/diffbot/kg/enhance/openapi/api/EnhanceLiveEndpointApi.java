/*
 * Diffbot Enhance Service
 * Enhance is an API to find a person or organization in the Knowledge Graph using partial data
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: support@diffbot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.diffbot.kg.enhance.openapi.api;

import com.diffbot.kg.enhance.openapi.invoker.ApiCallback;
import com.diffbot.kg.enhance.openapi.invoker.ApiClient;
import com.diffbot.kg.enhance.openapi.invoker.ApiException;
import com.diffbot.kg.enhance.openapi.invoker.ApiResponse;
import com.diffbot.kg.enhance.openapi.invoker.Configuration;
import com.diffbot.kg.enhance.openapi.invoker.Pair;
import com.diffbot.kg.enhance.openapi.invoker.ProgressRequestBody;
import com.diffbot.kg.enhance.openapi.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.diffbot.kg.enhance.openapi.model.EnhanceResponse;
import com.diffbot.kg.enhance.openapi.model.RequestError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnhanceLiveEndpointApi {
    private ApiClient localVarApiClient;

    public EnhanceLiveEndpointApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnhanceLiveEndpointApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for enhance
     * @param token Diffbot Token (optional)
     * @param type Diffbot entity type (optional)
     * @param id DiffbotId of entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param name Name of the entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param url Origin or homepage URI of entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param phone Phone of the entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param email Email of the entity to enhance. Parameter can be used only with type &#x60;Person&#x60; (optional)
     * @param description Description of the entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param employer Employer of the entity to enhance. Parameter can be used only with type &#x60;Person&#x60; (optional)
     * @param title Title of the entity to enhance. Parameter can be used only with type &#x60;Person&#x60; (optional)
     * @param school School of the entity to enhance. Parameter can be used only with type &#x60;Person&#x60; (optional)
     * @param location Location of the entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param mode &#x60;mode&#x3D;refresh&#x60; indicates that Diffbot will attempt to recrawl all the origins of the identified entity and reconstruct the returned entity from this refreshed data. (optional)
     * @param nonCanonicalFacts &#x60;nonCanonicalFacts&#x3D;true&#x60; returns non-canonical facts. (optional)
     * @param jsonmode &#x60;jsonmode&#x3D;extended&#x60; returns origin information for facts. (optional)
     * @param rocketReachToken rocketReach token (optional)
     * @param xDiffbotRequestId Request UUID for tracking. If available, will be set on response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enhanced entity </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error parsing request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Insufficient credits </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enhanceCall(String token, String type, String id, String name, String url, String phone, String email, String description, String employer, String title, String school, String location, String mode, String nonCanonicalFacts, String jsonmode, String rocketReachToken, String xDiffbotRequestId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kg/enhance_endpoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (phone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone", phone));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (employer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employer", employer));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (school != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("school", school));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (nonCanonicalFacts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nonCanonicalFacts", nonCanonicalFacts));
        }

        if (jsonmode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jsonmode", jsonmode));
        }

        if (rocketReachToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rocketReachToken", rocketReachToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xDiffbotRequestId != null) {
            localVarHeaderParams.put("X-Diffbot-RequestId", localVarApiClient.parameterToString(xDiffbotRequestId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enhanceValidateBeforeCall(String token, String type, String id, String name, String url, String phone, String email, String description, String employer, String title, String school, String location, String mode, String nonCanonicalFacts, String jsonmode, String rocketReachToken, String xDiffbotRequestId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = enhanceCall(token, type, id, name, url, phone, email, description, employer, title, school, location, mode, nonCanonicalFacts, jsonmode, rocketReachToken, xDiffbotRequestId, _callback);
        return localVarCall;

    }

    /**
     * Live Enhance Endpoint
     * Enhance endpoint to find person or organization using partial data
     * @param token Diffbot Token (optional)
     * @param type Diffbot entity type (optional)
     * @param id DiffbotId of entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param name Name of the entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param url Origin or homepage URI of entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param phone Phone of the entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param email Email of the entity to enhance. Parameter can be used only with type &#x60;Person&#x60; (optional)
     * @param description Description of the entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param employer Employer of the entity to enhance. Parameter can be used only with type &#x60;Person&#x60; (optional)
     * @param title Title of the entity to enhance. Parameter can be used only with type &#x60;Person&#x60; (optional)
     * @param school School of the entity to enhance. Parameter can be used only with type &#x60;Person&#x60; (optional)
     * @param location Location of the entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param mode &#x60;mode&#x3D;refresh&#x60; indicates that Diffbot will attempt to recrawl all the origins of the identified entity and reconstruct the returned entity from this refreshed data. (optional)
     * @param nonCanonicalFacts &#x60;nonCanonicalFacts&#x3D;true&#x60; returns non-canonical facts. (optional)
     * @param jsonmode &#x60;jsonmode&#x3D;extended&#x60; returns origin information for facts. (optional)
     * @param rocketReachToken rocketReach token (optional)
     * @param xDiffbotRequestId Request UUID for tracking. If available, will be set on response. (optional)
     * @return EnhanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enhanced entity </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error parsing request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Insufficient credits </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public EnhanceResponse enhance(String token, String type, String id, String name, String url, String phone, String email, String description, String employer, String title, String school, String location, String mode, String nonCanonicalFacts, String jsonmode, String rocketReachToken, String xDiffbotRequestId) throws ApiException {
        ApiResponse<EnhanceResponse> localVarResp = enhanceWithHttpInfo(token, type, id, name, url, phone, email, description, employer, title, school, location, mode, nonCanonicalFacts, jsonmode, rocketReachToken, xDiffbotRequestId);
        return localVarResp.getData();
    }

    /**
     * Live Enhance Endpoint
     * Enhance endpoint to find person or organization using partial data
     * @param token Diffbot Token (optional)
     * @param type Diffbot entity type (optional)
     * @param id DiffbotId of entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param name Name of the entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param url Origin or homepage URI of entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param phone Phone of the entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param email Email of the entity to enhance. Parameter can be used only with type &#x60;Person&#x60; (optional)
     * @param description Description of the entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param employer Employer of the entity to enhance. Parameter can be used only with type &#x60;Person&#x60; (optional)
     * @param title Title of the entity to enhance. Parameter can be used only with type &#x60;Person&#x60; (optional)
     * @param school School of the entity to enhance. Parameter can be used only with type &#x60;Person&#x60; (optional)
     * @param location Location of the entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param mode &#x60;mode&#x3D;refresh&#x60; indicates that Diffbot will attempt to recrawl all the origins of the identified entity and reconstruct the returned entity from this refreshed data. (optional)
     * @param nonCanonicalFacts &#x60;nonCanonicalFacts&#x3D;true&#x60; returns non-canonical facts. (optional)
     * @param jsonmode &#x60;jsonmode&#x3D;extended&#x60; returns origin information for facts. (optional)
     * @param rocketReachToken rocketReach token (optional)
     * @param xDiffbotRequestId Request UUID for tracking. If available, will be set on response. (optional)
     * @return ApiResponse&lt;EnhanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enhanced entity </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error parsing request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Insufficient credits </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnhanceResponse> enhanceWithHttpInfo(String token, String type, String id, String name, String url, String phone, String email, String description, String employer, String title, String school, String location, String mode, String nonCanonicalFacts, String jsonmode, String rocketReachToken, String xDiffbotRequestId) throws ApiException {
        okhttp3.Call localVarCall = enhanceValidateBeforeCall(token, type, id, name, url, phone, email, description, employer, title, school, location, mode, nonCanonicalFacts, jsonmode, rocketReachToken, xDiffbotRequestId, null);
        Type localVarReturnType = new TypeToken<EnhanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Live Enhance Endpoint (asynchronously)
     * Enhance endpoint to find person or organization using partial data
     * @param token Diffbot Token (optional)
     * @param type Diffbot entity type (optional)
     * @param id DiffbotId of entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param name Name of the entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param url Origin or homepage URI of entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param phone Phone of the entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param email Email of the entity to enhance. Parameter can be used only with type &#x60;Person&#x60; (optional)
     * @param description Description of the entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param employer Employer of the entity to enhance. Parameter can be used only with type &#x60;Person&#x60; (optional)
     * @param title Title of the entity to enhance. Parameter can be used only with type &#x60;Person&#x60; (optional)
     * @param school School of the entity to enhance. Parameter can be used only with type &#x60;Person&#x60; (optional)
     * @param location Location of the entity to enhance. Parameter can be used with types &#x60;Person&#x60; and &#x60;Organization&#x60; (optional)
     * @param mode &#x60;mode&#x3D;refresh&#x60; indicates that Diffbot will attempt to recrawl all the origins of the identified entity and reconstruct the returned entity from this refreshed data. (optional)
     * @param nonCanonicalFacts &#x60;nonCanonicalFacts&#x3D;true&#x60; returns non-canonical facts. (optional)
     * @param jsonmode &#x60;jsonmode&#x3D;extended&#x60; returns origin information for facts. (optional)
     * @param rocketReachToken rocketReach token (optional)
     * @param xDiffbotRequestId Request UUID for tracking. If available, will be set on response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enhanced entity </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error parsing request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Insufficient credits </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enhanceAsync(String token, String type, String id, String name, String url, String phone, String email, String description, String employer, String title, String school, String location, String mode, String nonCanonicalFacts, String jsonmode, String rocketReachToken, String xDiffbotRequestId, final ApiCallback<EnhanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enhanceValidateBeforeCall(token, type, id, name, url, phone, email, description, employer, title, school, location, mode, nonCanonicalFacts, jsonmode, rocketReachToken, xDiffbotRequestId, _callback);
        Type localVarReturnType = new TypeToken<EnhanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
