/*
 * Diffbot Enhance Service
 * Enhance is an API to find a person or organization in the Knowledge Graph using partial data
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: support@diffbot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.diffbot.kg.enhance.openapi.api;

import com.diffbot.kg.enhance.openapi.invoker.ApiCallback;
import com.diffbot.kg.enhance.openapi.invoker.ApiClient;
import com.diffbot.kg.enhance.openapi.invoker.ApiException;
import com.diffbot.kg.enhance.openapi.invoker.ApiResponse;
import com.diffbot.kg.enhance.openapi.invoker.Configuration;
import com.diffbot.kg.enhance.openapi.invoker.Pair;
import com.diffbot.kg.enhance.openapi.invoker.ProgressRequestBody;
import com.diffbot.kg.enhance.openapi.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.diffbot.kg.enhance.openapi.model.BulkjobAccepted;
import com.diffbot.kg.enhance.openapi.model.BulkjobRecoveryStatusResponse;
import com.diffbot.kg.enhance.openapi.model.BulkjobStatusResponse;
import com.diffbot.kg.enhance.openapi.model.RequestError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BulkEnhanceEndpointApi {
    private ApiClient localVarApiClient;

    public BulkEnhanceEndpointApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BulkEnhanceEndpointApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for bulkjobStatus
     * @param bulkjobId Bulkjob Id (required)
     * @param token Diffbot Token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bulkjob status </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Bulkjob is still executing or is stopped </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid bulkjobId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bulkjob not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkjobStatusCall(String bulkjobId, String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kg/enhance_endpoint/bulk/{bulkjobId}/status"
            .replaceAll("\\{" + "bulkjobId" + "\\}", localVarApiClient.escapeString(bulkjobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkjobStatusValidateBeforeCall(String bulkjobId, String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bulkjobId' is set
        if (bulkjobId == null) {
            throw new ApiException("Missing the required parameter 'bulkjobId' when calling bulkjobStatus(Async)");
        }
        

        okhttp3.Call localVarCall = bulkjobStatusCall(bulkjobId, token, _callback);
        return localVarCall;

    }

    /**
     * Bulk Enhance Status Endpoint
     * Get status of a bulk Enhance job
     * @param bulkjobId Bulkjob Id (required)
     * @param token Diffbot Token (optional)
     * @return BulkjobStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bulkjob status </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Bulkjob is still executing or is stopped </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid bulkjobId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bulkjob not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public BulkjobStatusResponse bulkjobStatus(String bulkjobId, String token) throws ApiException {
        ApiResponse<BulkjobStatusResponse> localVarResp = bulkjobStatusWithHttpInfo(bulkjobId, token);
        return localVarResp.getData();
    }

    /**
     * Bulk Enhance Status Endpoint
     * Get status of a bulk Enhance job
     * @param bulkjobId Bulkjob Id (required)
     * @param token Diffbot Token (optional)
     * @return ApiResponse&lt;BulkjobStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bulkjob status </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Bulkjob is still executing or is stopped </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid bulkjobId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bulkjob not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkjobStatusResponse> bulkjobStatusWithHttpInfo(String bulkjobId, String token) throws ApiException {
        okhttp3.Call localVarCall = bulkjobStatusValidateBeforeCall(bulkjobId, token, null);
        Type localVarReturnType = new TypeToken<BulkjobStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk Enhance Status Endpoint (asynchronously)
     * Get status of a bulk Enhance job
     * @param bulkjobId Bulkjob Id (required)
     * @param token Diffbot Token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bulkjob status </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Bulkjob is still executing or is stopped </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid bulkjobId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bulkjob not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkjobStatusAsync(String bulkjobId, String token, final ApiCallback<BulkjobStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkjobStatusValidateBeforeCall(bulkjobId, token, _callback);
        Type localVarReturnType = new TypeToken<BulkjobStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enhanceBulkjob
     * @param token Diffbot Token (optional)
     * @param tag Tag (optional)
     * @param mode &#x60;mode&#x3D;refresh&#x60; indicates that Diffbot will attempt to recrawl all the origins of the identified entity and reconstruct the returned entity from this refreshed data. (optional)
     * @param nonCanonicalFacts &#x60;nonCanonicalFacts&#x3D;true&#x60; returns non-canonical facts. (optional)
     * @param jsonmode &#x60;jsonmode&#x3D;extended&#x60; returns origin information for facts. (optional)
     * @param leadIQToken leadIQ token (optional)
     * @param rocketReachToken rocketReach token (optional)
     * @param webhookurl Webhook URL (optional)
     * @param xDiffbotRequestId Request UUID for tracking. If available, will be set on response. (optional)
     * @param requestBody Bulk query payload (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement with bulkjobId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error parsing request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Insufficient credits </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Request too large </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enhanceBulkjobCall(String token, List<String> tag, String mode, String nonCanonicalFacts, String jsonmode, String leadIQToken, String rocketReachToken, String webhookurl, String xDiffbotRequestId, List<Object> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/kg/enhance_endpoint/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (tag != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tag", tag));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (nonCanonicalFacts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nonCanonicalFacts", nonCanonicalFacts));
        }

        if (jsonmode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jsonmode", jsonmode));
        }

        if (leadIQToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("leadIQToken", leadIQToken));
        }

        if (rocketReachToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rocketReachToken", rocketReachToken));
        }

        if (webhookurl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webhookurl", webhookurl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xDiffbotRequestId != null) {
            localVarHeaderParams.put("X-Diffbot-RequestId", localVarApiClient.parameterToString(xDiffbotRequestId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enhanceBulkjobValidateBeforeCall(String token, List<String> tag, String mode, String nonCanonicalFacts, String jsonmode, String leadIQToken, String rocketReachToken, String webhookurl, String xDiffbotRequestId, List<Object> requestBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = enhanceBulkjobCall(token, tag, mode, nonCanonicalFacts, jsonmode, leadIQToken, rocketReachToken, webhookurl, xDiffbotRequestId, requestBody, _callback);
        return localVarCall;

    }

    /**
     * Bulk Enhance Endpoint
     * Enhance endpoint to find person or organization using partial data
     * @param token Diffbot Token (optional)
     * @param tag Tag (optional)
     * @param mode &#x60;mode&#x3D;refresh&#x60; indicates that Diffbot will attempt to recrawl all the origins of the identified entity and reconstruct the returned entity from this refreshed data. (optional)
     * @param nonCanonicalFacts &#x60;nonCanonicalFacts&#x3D;true&#x60; returns non-canonical facts. (optional)
     * @param jsonmode &#x60;jsonmode&#x3D;extended&#x60; returns origin information for facts. (optional)
     * @param leadIQToken leadIQ token (optional)
     * @param rocketReachToken rocketReach token (optional)
     * @param webhookurl Webhook URL (optional)
     * @param xDiffbotRequestId Request UUID for tracking. If available, will be set on response. (optional)
     * @param requestBody Bulk query payload (optional)
     * @return BulkjobAccepted
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement with bulkjobId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error parsing request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Insufficient credits </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Request too large </td><td>  -  </td></tr>
     </table>
     */
    public BulkjobAccepted enhanceBulkjob(String token, List<String> tag, String mode, String nonCanonicalFacts, String jsonmode, String leadIQToken, String rocketReachToken, String webhookurl, String xDiffbotRequestId, List<Object> requestBody) throws ApiException {
        ApiResponse<BulkjobAccepted> localVarResp = enhanceBulkjobWithHttpInfo(token, tag, mode, nonCanonicalFacts, jsonmode, leadIQToken, rocketReachToken, webhookurl, xDiffbotRequestId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Bulk Enhance Endpoint
     * Enhance endpoint to find person or organization using partial data
     * @param token Diffbot Token (optional)
     * @param tag Tag (optional)
     * @param mode &#x60;mode&#x3D;refresh&#x60; indicates that Diffbot will attempt to recrawl all the origins of the identified entity and reconstruct the returned entity from this refreshed data. (optional)
     * @param nonCanonicalFacts &#x60;nonCanonicalFacts&#x3D;true&#x60; returns non-canonical facts. (optional)
     * @param jsonmode &#x60;jsonmode&#x3D;extended&#x60; returns origin information for facts. (optional)
     * @param leadIQToken leadIQ token (optional)
     * @param rocketReachToken rocketReach token (optional)
     * @param webhookurl Webhook URL (optional)
     * @param xDiffbotRequestId Request UUID for tracking. If available, will be set on response. (optional)
     * @param requestBody Bulk query payload (optional)
     * @return ApiResponse&lt;BulkjobAccepted&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement with bulkjobId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error parsing request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Insufficient credits </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Request too large </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkjobAccepted> enhanceBulkjobWithHttpInfo(String token, List<String> tag, String mode, String nonCanonicalFacts, String jsonmode, String leadIQToken, String rocketReachToken, String webhookurl, String xDiffbotRequestId, List<Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = enhanceBulkjobValidateBeforeCall(token, tag, mode, nonCanonicalFacts, jsonmode, leadIQToken, rocketReachToken, webhookurl, xDiffbotRequestId, requestBody, null);
        Type localVarReturnType = new TypeToken<BulkjobAccepted>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk Enhance Endpoint (asynchronously)
     * Enhance endpoint to find person or organization using partial data
     * @param token Diffbot Token (optional)
     * @param tag Tag (optional)
     * @param mode &#x60;mode&#x3D;refresh&#x60; indicates that Diffbot will attempt to recrawl all the origins of the identified entity and reconstruct the returned entity from this refreshed data. (optional)
     * @param nonCanonicalFacts &#x60;nonCanonicalFacts&#x3D;true&#x60; returns non-canonical facts. (optional)
     * @param jsonmode &#x60;jsonmode&#x3D;extended&#x60; returns origin information for facts. (optional)
     * @param leadIQToken leadIQ token (optional)
     * @param rocketReachToken rocketReach token (optional)
     * @param webhookurl Webhook URL (optional)
     * @param xDiffbotRequestId Request UUID for tracking. If available, will be set on response. (optional)
     * @param requestBody Bulk query payload (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement with bulkjobId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error parsing request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Insufficient credits </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Request too large </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enhanceBulkjobAsync(String token, List<String> tag, String mode, String nonCanonicalFacts, String jsonmode, String leadIQToken, String rocketReachToken, String webhookurl, String xDiffbotRequestId, List<Object> requestBody, final ApiCallback<BulkjobAccepted> _callback) throws ApiException {

        okhttp3.Call localVarCall = enhanceBulkjobValidateBeforeCall(token, tag, mode, nonCanonicalFacts, jsonmode, leadIQToken, rocketReachToken, webhookurl, xDiffbotRequestId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<BulkjobAccepted>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pollBulkjob
     * @param bulkjobId Bulkjob Id (required)
     * @param token Diffbot Token (optional)
     * @param csvmode Return results as csv (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enhanced entity </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Bulkjob is still executing or is stopped </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid bulkjobId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bulkjob not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pollBulkjobCall(String bulkjobId, String token, String csvmode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kg/enhance_endpoint/bulk/{bulkjobId}"
            .replaceAll("\\{" + "bulkjobId" + "\\}", localVarApiClient.escapeString(bulkjobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (csvmode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("csvmode", csvmode));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pollBulkjobValidateBeforeCall(String bulkjobId, String token, String csvmode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bulkjobId' is set
        if (bulkjobId == null) {
            throw new ApiException("Missing the required parameter 'bulkjobId' when calling pollBulkjob(Async)");
        }
        

        okhttp3.Call localVarCall = pollBulkjobCall(bulkjobId, token, csvmode, _callback);
        return localVarCall;

    }

    /**
     * Bulk Enhance Poll Endpoint
     * Poll a bulk Enhance job
     * @param bulkjobId Bulkjob Id (required)
     * @param token Diffbot Token (optional)
     * @param csvmode Return results as csv (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enhanced entity </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Bulkjob is still executing or is stopped </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid bulkjobId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bulkjob not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Object pollBulkjob(String bulkjobId, String token, String csvmode) throws ApiException {
        ApiResponse<Object> localVarResp = pollBulkjobWithHttpInfo(bulkjobId, token, csvmode);
        return localVarResp.getData();
    }

    /**
     * Bulk Enhance Poll Endpoint
     * Poll a bulk Enhance job
     * @param bulkjobId Bulkjob Id (required)
     * @param token Diffbot Token (optional)
     * @param csvmode Return results as csv (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enhanced entity </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Bulkjob is still executing or is stopped </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid bulkjobId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bulkjob not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pollBulkjobWithHttpInfo(String bulkjobId, String token, String csvmode) throws ApiException {
        okhttp3.Call localVarCall = pollBulkjobValidateBeforeCall(bulkjobId, token, csvmode, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk Enhance Poll Endpoint (asynchronously)
     * Poll a bulk Enhance job
     * @param bulkjobId Bulkjob Id (required)
     * @param token Diffbot Token (optional)
     * @param csvmode Return results as csv (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enhanced entity </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Bulkjob is still executing or is stopped </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid bulkjobId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bulkjob not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pollBulkjobAsync(String bulkjobId, String token, String csvmode, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pollBulkjobValidateBeforeCall(bulkjobId, token, csvmode, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopBulkjob
     * @param bulkjobId Bulkjob Id (required)
     * @param token Diffbot Token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enhanced entity </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid bulkjobId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bulkjob not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopBulkjobCall(String bulkjobId, String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kg/enhance_endpoint/bulk/{bulkjobId}/stop"
            .replaceAll("\\{" + "bulkjobId" + "\\}", localVarApiClient.escapeString(bulkjobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopBulkjobValidateBeforeCall(String bulkjobId, String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bulkjobId' is set
        if (bulkjobId == null) {
            throw new ApiException("Missing the required parameter 'bulkjobId' when calling stopBulkjob(Async)");
        }
        

        okhttp3.Call localVarCall = stopBulkjobCall(bulkjobId, token, _callback);
        return localVarCall;

    }

    /**
     * Bulkjob stop
     * Stop an incomplete job
     * @param bulkjobId Bulkjob Id (required)
     * @param token Diffbot Token (optional)
     * @return BulkjobRecoveryStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enhanced entity </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid bulkjobId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bulkjob not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public BulkjobRecoveryStatusResponse stopBulkjob(String bulkjobId, String token) throws ApiException {
        ApiResponse<BulkjobRecoveryStatusResponse> localVarResp = stopBulkjobWithHttpInfo(bulkjobId, token);
        return localVarResp.getData();
    }

    /**
     * Bulkjob stop
     * Stop an incomplete job
     * @param bulkjobId Bulkjob Id (required)
     * @param token Diffbot Token (optional)
     * @return ApiResponse&lt;BulkjobRecoveryStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enhanced entity </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid bulkjobId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bulkjob not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkjobRecoveryStatusResponse> stopBulkjobWithHttpInfo(String bulkjobId, String token) throws ApiException {
        okhttp3.Call localVarCall = stopBulkjobValidateBeforeCall(bulkjobId, token, null);
        Type localVarReturnType = new TypeToken<BulkjobRecoveryStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulkjob stop (asynchronously)
     * Stop an incomplete job
     * @param bulkjobId Bulkjob Id (required)
     * @param token Diffbot Token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enhanced entity </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid bulkjobId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token not specified or other client errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bulkjob not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopBulkjobAsync(String bulkjobId, String token, final ApiCallback<BulkjobRecoveryStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopBulkjobValidateBeforeCall(bulkjobId, token, _callback);
        Type localVarReturnType = new TypeToken<BulkjobRecoveryStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
